@using Return.Application.Common.Models
@inherits NoteGroupBase

<div class="note-group dropzone"
     ondragover="event.preventDefault();"
     @ondrop="@HandleDrop"
     @ondragenter="@HandleDragEnter"
     @ondragleave="@HandleDragLeave">
    @if (this.CanEdit)
    {
        <div class="field has-addons" style="width: 100%">
            <div class="control is-expanded">
                <input class="input note-group__title-input has-text-centered @(this.ShowError ? "is-danger" : (this.ShowWarning ? "is-warning" : null))" 
                       type="text" 
                       placeholder="Group name" 
                       @bind="@this.DataTitle" />
            </div>
            <div class="control">
                <button class="button is-danger is-outlined" @onclick="@DeleteNoteGroup">
                    <i class="fas fa-trash is-danger"></i>
                </button>
            </div>
        </div>

    }
    else
    {
        <h4 class="is-size-5 note-group__title @(String.IsNullOrEmpty(this.Data.Title) ? "note-group__title--not-set" : "")">@(String.IsNullOrEmpty(this.Data.Title) ? "Group name" : this.Data.Title)</h4>
    }

    @foreach (RetrospectiveNote note in this.Data.Notes)
    {
        <Revealable @key="note.Id">
            <Note Data="@note" />
        </Revealable>
    }

    @if (this.Data.Notes.Count == 0)
    {
        <div class="box">
            <p>
                This group is empty.
                @if (this.CanEdit)
                {
                    <text>Drag-and-drop notes here to add them to this group!</text>
                }
            </p>
        </div>
    }
</div>
