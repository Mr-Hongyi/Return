@using Return.Application.Retrospectives.Queries.GetRetrospectiveStatus
@using Application.Common.Models;
@using Return.Web.Pages
@using System.Threading.Tasks;
<RetrospectiveRolePanel>
    <Facilitator>

        <textarea class="textarea note__content is-small has-fixed-size"
                  rows="3"
                  style="background-color: white;
                         color: black;
                         text-shadow: none;
                         font-size: 15px;
                         font-weight: bold;"
                  placeholder="Enter your action note here"
                  @bind-value="@TextData"
                  @bind-value:event="oninput"></textarea>

        <p>

        </p>

        <p class="has-text-centered">
            <button type="button"
                    class="button is-link is-outlined"
                    @onclick="@AddNote"
                    data-test-element-id="add-note-button">
                <span class="icon">
                    <span class="fas fa-plus-square"></span>
                </span>
                <span>
                    Create an Action
                </span>
            </button>
        </p>

        <p>

        </p>



        @foreach (var Action in Finished.ActionList)
        {
        <div class="box note"
                data-test-element-id="note"
                style="background-color: white">
                
            <div class="note__delete-icon-black"
                 data-keypress-handler="CTRL+Delete" title="You can also press CTRL+Delete when you have the textarea in focus"
                 @onclick="@(()=>DeleteNote(Action))">
                <i class="fas fa-trash"></i>
            </div>
                    

                    
                <p class="note__content"
                   style="color:black;text-shadow:none">
                    <b>@Action</b>
</p>
                
        </div>
        }
  


        <p>

        </p>



    </Facilitator>
    <Participant>


        @foreach (var Action in Finished.ActionList)
        {
        <div class="box note"
             data-test-element-id="note"
             style="background-color:white">


            <p class="note__content"
               style="color:black;text-shadow:none">
                <b>@Action</b>
            </p>

        </div>
        }


        <p>

        </p>


      
    </Participant>
</RetrospectiveRolePanel>

@if (this.RetrospectiveLobby != null)
{
    if (this.RetrospectiveLobby.ShowShowcase)
    {
        <button type="button"
                class="button is-link is-outlined full-width"
                data-test-element-id="toggle-view-button"
                @onclick="@(() => this.RetrospectiveLobby.ShowBoardDisplay())">
            <span class="icon"><span class="fas fa-columns"></span></span><span>Show full board</span>
        </button>
    }
    else
    {
        <button type="button"
                class="button is-link is-outlined full-width"
                data-test-element-id="toggle-view-button"
                @onclick="@(() => this.RetrospectiveLobby.ShowShowcaseDisplay())">
            <span class="icon"><span class="fas fa-list-ol"></span></span><span>Show top items</span>
        </button>
    }
}

@code {
#nullable disable
    [CascadingParameter]
    public IRetrospectiveLobby RetrospectiveLobby { get; set; }

    public String TextData;
    public static List<string> ActionList = new List<string>();
    private System.Threading.Timer MyTimer { get; set; }

    protected override void OnInitialized() {
        this.MyTimer = new System.Threading.Timer(this.CheckCondition, null, 100, 100);
    }

    private void CheckCondition(object state) {
        this.InvokeAsync(() => this.StateHasChanged());

    }

    public void AddNote()
    {
        Finished.ActionList.Add(this.TextData);
        this.TextData = "";
        //this.StateHasChanged();
    }

    public void DeleteNote(String input) {
        Finished.ActionList.Remove(input);
        this.TextData = "";
        //this.StateHasChanged();
    }

}