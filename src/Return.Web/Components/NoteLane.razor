@using Return.Application.Common.Models
@inherits NoteLaneBase

@if (this.Lane == null)
{
    return;
}

<CascadingValue Value="this">
    <CascadingValue Value="this.Lane">
        <h2 class="title has-text-centered">@Lane.Name</h2>

        @if (this.Contents == null)
        {
            return;
        }

        @* Action section *@
        @if (this.RetrospectiveStatus?.IsEditingNotesAllowed == true)
        {
            @if (this.ShowErrorMessage)
            {
                <ErrorMessage />
            }

            <p class="has-text-centered">
                <button type="button"
                        class="button is-link is-outlined"
                        @onclick="@AddNote"
                        data-keypress-handler="CTRL+@this.Order" title="You can also press CTRL+@this.Order"
                        data-test-element-id="add-note-button">
                    <span class="icon">
                        <span class="fas fa-plus-square"></span>
                    </span>
                    <span>
                        Create a note
                    </span>
                </button>
            </p>
        }

        @if (IsGroupingAllowed())
        {
            @if (this.ShowErrorMessage)
            {
                <ErrorMessage />
            }

            <p class="has-text-centered">
                <button type="button"
                        class="button is-link is-outlined"
                        @onclick="@AddNoteGroup"
                        data-keypress-handler="CTRL+@this.Order" title="You can also press CTRL+@this.Order"
                        data-test-element-id="add-note-group-button">
                    <span class="icon">
                        <span class="fas fa-plus-square"></span>
                    </span>
                    <span>
                        Create a group
                    </span>
                </button>
            </p>
        }


        @* Note groups section *@
        @if (DisplayGroupHeaders())
        {
            @if (this.Lane.Id == 1)
            {
                @foreach (RetrospectiveNoteGroup noteGroup in Globals.ContentsStart.Groups)
                {
                    <Revealable @key="@("ng" + noteGroup.Id)">
                        <NoteGroup Data="@noteGroup" CanEdit="@IsGroupingAllowed()" />
                    </Revealable>
                }

                @if (Globals.ContentsStart.Groups.Count == 0)
                {
                    <div class="box">
                        <p>
                            No notes have been grouped.
                        </p>
                    </div>
                }
            }
            else if (this.Lane.Id == 2)
            {
                @foreach (RetrospectiveNoteGroup noteGroup in Globals.ContentsStop.Groups)
                {
                    <Revealable @key="@("ng" + noteGroup.Id)">
                        <NoteGroup Data="@noteGroup" CanEdit="@IsGroupingAllowed()" />
                    </Revealable>
                }

                @if (Globals.ContentsStop.Groups.Count == 0)
                {
                    <div class="box">
                        <p>
                            No notes have been grouped.
                        </p>
                    </div>
                }
            }
            else
            {
                @foreach (RetrospectiveNoteGroup noteGroup in Globals.ContentsContinue.Groups)
                {
                    <Revealable @key="@("ng" + noteGroup.Id)">
                        <NoteGroup Data="@noteGroup" CanEdit="@IsGroupingAllowed()" />
                    </Revealable>
                }

                @if (Globals.ContentsContinue.Groups.Count == 0)
                {
                    <div class="box">
                        <p>
                            No notes have been grouped.
                        </p>
                    </div>
                }
            }

        }

        @if (IsGroupingAllowed())
        {
            <NoteUngroupDropzone />
        }

        @* Notes section *@
        @if (this.Lane.Id == 1)
        {
            @if (DisplayGroupHeaders() == false || IsGroupingAllowed() || Globals.ContentsStart.Notes.Count > 0)
            {
                @foreach (RetrospectiveNote note in Globals.ContentsStart.Notes)
                {
                    <Revealable @key="@("n" + note.Id)">
                        <Note Data="@note" OnDeleted="@(r => this.OnNoteDeletedCallback(r))" IsLastAddedNote="@(note == this.LastAddedNote)" />
                    </Revealable>
                }
            }

            @if (Globals.ContentsStart.Notes.Count == 0 && Globals.ContentsStart.Groups.Count == 0)
            {
                <div class="box">
                    <p>
                        It is empty here.
                    </p>
                </div>
            }
        }
        else if (this.Lane.Id == 2)
        {
            @if (DisplayGroupHeaders() == false || IsGroupingAllowed() || Globals.ContentsStop.Notes.Count > 0)
            {
                @foreach (RetrospectiveNote note in Globals.ContentsStop.Notes)
                {
                    <Revealable @key="@("n" + note.Id)">
                        <Note Data="@note" OnDeleted="@(r => this.OnNoteDeletedCallback(r))" IsLastAddedNote="@(note == this.LastAddedNote)" />
                    </Revealable>
                }
            }

            @if (Globals.ContentsStop.Notes.Count == 0 && Globals.ContentsStop.Groups.Count == 0)
            {
                <div class="box">
                    <p>
                        It is empty here.
                    </p>
                </div>
            }
        }
        else
        {
            @if (DisplayGroupHeaders() == false || IsGroupingAllowed() || Globals.ContentsContinue.Notes.Count > 0)
            {
                @foreach (RetrospectiveNote note in Globals.ContentsContinue.Notes)
                {
                    <Revealable @key="@("n" + note.Id)">
                        <Note Data="@note" OnDeleted="@(r => this.OnNoteDeletedCallback(r))" IsLastAddedNote="@(note == this.LastAddedNote)" />
                    </Revealable>
                }
            }

            @if (Globals.ContentsContinue.Notes.Count == 0 && Globals.ContentsContinue.Groups.Count == 0)
            {
                <div class="box">
                    <p>
                        It is empty here.
                    </p>
                </div>
            }

        }




    </CascadingValue>
</CascadingValue>