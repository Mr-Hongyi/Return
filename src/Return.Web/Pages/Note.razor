@using Return.Application.Common.Models
@using Return.Application.Notes.Commands
@using Return.Application.Retrospectives.Queries.GetRetrospectiveStatus

<div class="box @(this.CanView() ? "" : "box--blurred")" style="background-color: #@this.Data.ParticipantColor.HexString">
    @if (this.CanEdit())
    {
    <EditForm Model="@Data" OnValidSubmit="OnHandleNoteFormSubmit">
        <InputTextArea class="textarea box__content is-small has-fixed-size" 
                       rows="3" 
                       placeholder="Enter your text here" 
                       @bind-Value="@Data.Text" 
                       @oninput="@OnHandleNoteUpdateTyping"/>
    </EditForm>
    }
    else
    {
        <p class="box__content">
            @Data.Text
        </p>
    }
</div>

@code {
    [CascadingParameter]
    public RetrospectiveStatus RetrospectiveStatus { get; set; } = new RetrospectiveStatus();

    [Parameter]
    public RetrospectiveNote Data { get; set; } = new RetrospectiveNote();

    public UpdateNoteCommand Model { get; } = new UpdateNoteCommand();

    protected override void OnParametersSet()
    {
        if (this.Data != null)
        {
            this.Model.Id = this.Data.Id;
            this.Model.Text = this.Data.Text;
        }

        base.OnParametersSet();
    }

    protected Task OnHandleNoteFormSubmit()
    {
        return Task.CompletedTask;
    }

    protected Task OnHandleNoteUpdateTyping()
    {
        // TODO: dispatch update
        return Task.CompletedTask;
    }

    private bool CanEdit() => this.RetrospectiveStatus.IsEditingNotesAllowed && this.Data.IsOwnedByCurrentUser;
    private bool CanView() => this.RetrospectiveStatus.IsViewingOtherNotesAllowed && this.Data.IsOwnedByCurrentUser;
}
